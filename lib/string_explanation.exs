
# 문자열 리터럴
# 엘릭서에는 두 종류에 문자열이 있다
# 하나는 작은따옴표(single quotation)로 감싼 것이고 다른 하나는 큰따옴표(double quotation)로 감싼 것이다
# 둘은 내부 구현이 매우 다르지만 공통점도 많다
# 양쪽 모두 다음과 같은 특징이 있다
# - UTF-8 인코딩된 문자를 저장할 수 있다
# - 이스케이프 문자를 포함할 수 있다
# - #{...} 문법으로 엘릭서 표현식을 삽입할 수 있다
# - 특별한 의미를 가진 문자는 백슬래시(\)를 사용해 이스케이프할 수 있다 (ex \' 등)
# 히어독스 표기법을 지원한다

# 히어독스
# 모든 문자열은 여러 줄로 늘어날 수 있다
# 문자열을 출력할 때는 IO.puts와 IO.write라는 두 함수를 사용할 수 있는데,
# puts는 항상 줄바꿈을 추가한다 (python의 default print 같네)
# 이 절에서 여러 줄인 문자열을 출력할 때는 줄바꿈을 추가하지 않는 write 함수를 사용한다

IO.puts("start")
IO.write("
  my
  string
")
IO.puts("end")
# 위 코드가 실행되면 아래와 같이 출력 된다
# start
#
#   my
#   string
# end

# 여러 줄 문자열의 앞뒤 줄바꿈, 중간에 위치한 줄의 들여쓰기가 그대로 유지되었다
# 히어독스 표기법은 이러한 문제를 해결해준다
# 다음처럼 문자열 구분자를 세 번 입력하고(''', """ 똑같은듯)
# 내용의 들여쓰기에 맞추어서 닫는 구분자를 넣어주면 된다

IO.puts("start")
IO.write("""
  my
  string
  """)  # <= 닫는 """가 들여쓰기를 정함
IO.puts("end")

# 위 코드가 실행되면 다음과 같이 출력 된다
# start
# my
# string
# end

# 히어독스는 함수나 모듈의 문서를 추가할 때 많이 사용한다


# 시길
# 루비와 비슷하게, 엘릭서는 일부 리터럴에 대한 대체 문법을 제공한다
# 그중 하나로 ~r{...}로 정규식을 생성할 수 있다
# 이와 같이 ~로 시작하는 리터럴을 엘릭서에서는 시길이라 부른다
# 시길은 틸드(~)로 시작하며 영문 대문자나 소문자 중 한 글자, 구분자로 싸인 내용, 부가적인 옵션이 차례로 이어진다
# 구분자는 <...>, {...}, [...], (...), |...|, /.../, "...", '...' 등이 될 수 있다
# 틸드 뒤에 오는 문자는 시길의 종류를 정한다
# ~C : 이스케이프 또는 문자열 삽입을 수행하지 않는 문자 리스트
# ~c : 이스케이프 밎 문자열 삽입을 수행하는 문자 리스트로, 작은따옴표(') 문자열과 같음 # <= 요즘은 시길 문법으로 쓰길 원하는듯?
# ~D : yyyy-mm-dd 형식의 날짜로, 타입은 Data
# ~N : yyyy-mm-dd:mm:ss[.ddd] 형식의 NaiveDateTime
# ~R : 이스케이프 또는 문자열 삽입을 수행하지 않는 정규식
# ~r : 이스케이프 및 문자열 삽입을 수행하는 정규식
# ~S : 이스케이프 또는 문자열 삽입을 수행하지 않는 문자열
# ~s : 이스케이프 및 문자열 삽입을 수행하는 문자열로, 큰따옴표(") 문자열과 같음
# ~T : hh:mm:ss[.dddd] 형식의 시간으로, 타입은 타임
# ~U : ISO-8601 형식의 날짜로, 타입은 DateTime
# ~W : 공백 문자로 값을 구분하는 리스트로, 이스케이프 또는 문자열 삽입을 수행하지 않음
# ~w : 공백 문자로 값을 구분하는 리스트로, 이스케이프 및 문자열 삽입을 수행함

# 다음은 다양한 구분자를 사용한 시길의 예시다
~C[1\n2#{1+2}]
# ~c"1\\n2\#{1+2}"
~c"1\n2#{1+2}"
# ~c"1\n23"
~S[1\n2#{1+2}]
# "1\\n2\#{1+2}"
~s/1\n2#{1+2}/
# "1\n23"
~W[the c#{'a'}t sat on the mat]
# ["the", "c\#{'a'}t", "sat", "on", "the", "mat"]
~w[the c#{'a'}t sat on the mat]
# ["the", "cat", "sat", "on", "the", "mat"]
~D<1999-12-31>
# ~D[1999-12-31]
~T[12:34:56]
# ~T[12:34:56]
~N{1999-12-31 23:59:50}
# ~N[1999-12-31 23:59:50]

# ~W와 ~w 시길은 옵션으로 a, c, s를 받는다
# 이 옵션은 값을 아톰, 문자 리스트, 문자열 중 무엇으로 반환할지를 결정한다

~w[the c#{'a'}t sat on the mat]a
# [:the, :cat, :sat, :on, :the, :mat]
~w[the c#{'a'}t sat on the mat]c
# [~c"the", ~c"cat", ~c"sat", ~c"on", ~c"the", ~c"mat"]
~w[the c#{'a'}t sat on the mat]s
# ["the", "cat", "sat", "on", "the", "mat"]

# 내용을 감싸는 구분자는 '단어가 아닌' 문자라면 무엇이든 괜찮다
# 괄호 종류 (, [, {, <로 시작했다면 그에 대응하는 닫힘 문자를 종료 구분자로 사용해야 한다
# 구분자가 괄호가 아니라면 이스케이프되지 않은 상태로 두 번째로 나오는 시작 시분자가 종료 구분자가 왼다
# 엘릭서는 구분자의 중첩을 확인하지 않는다
# 따라서 ~{a{b}와 같은 시길은 a{b라는 세 글자 짜리 문자열이 된다
# 만약 시작 구분자가 작은따옴표나 근따옵표 세 개변, 이 시길은 히어독스로 취급된다

~w"""
the
cat
sat
"""
# ["the", "cat", "sat"]

# 히어독스 시길에 옵션을 넣고 싶을 때도(대부분 ~r을 사용할 때) 마찬가지로 종료 구분자 뒤에 넣어주면 된다
~r"""
hello
"""i
# ~r/hello\n/i

# 이 시길을 직접 만들 수도 있다
